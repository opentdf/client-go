# This dockerfile shows how to install the C++ OpenTDF library, and then perform a
# `go build` on Go dependencies that need that C++ library.
#
# The `client-cpp` library binary and include files MUST be available to Go
# during any `go build` step.
#
# As `client-cpp` uses `conan` for install/build/deploy, we rely on that to build `client-cpp` for us for
# targeted platforms, and install any necessary C++ deps that are required.

FROM python:3.9-bullseye AS builder

ARG CLIENT_CPP_VERSION=1.1.5

WORKDIR /build

RUN apt-get update && apt-get install -y cmake
RUN pip install conan~=1.52
RUN mkdir conan-output
# Note that `libiconv` is no longer present on bullseye/ubuntu latest,
# and so `conan` binaries built assuming `libiconv` is present will fail to link,
# with undefined references to `libiconv`.
#
# Hence, the following workarounds/flags are required to disable libiconv in the build,
# and produce a linkable shared library.
#
# See also convos in: https://github.com/conan-io/conan-center-index/pull/12697
RUN conan install opentdf-client/${CLIENT_CPP_VERSION}@ --build=missing -g deploy -if ./conan-output \
    -o libxml2:iconv=False \
    -o libxml2:icu=False \
    -o boost:i18n_backend_iconv="off" \
    -o boost:i18n_backend_icu=False \
    -o boost:without_locale=True

FROM golang:1.19-bullseye

COPY --chown=0:0 --from=builder /build/conan-output/opentdf-client/lib /build/tdf-client/lib
COPY --chown=0:0 --from=builder /build/conan-output/opentdf-client/include /build/tdf-client/include

ENV GO111MODULE=on \
    CGO_ENABLED=1 \
    GOOS=linux \
    CGO_LDFLAGS="-L/build/tdf-client/lib" \
    CGO_CFLAGS="-I/build/tdf-client/include"

WORKDIR /build

COPY . .

# Let's create a /dist folder containing just the files necessary for runtime.
# Later, it will be copied as the / (root) of the output image.
RUN mkdir /dist

#Build the demo executable - can be skipped if not needed
RUN go build  -o /dist/wrappertest ./cmd/wrappertest

# Build the library - Library consumers will build this library implicitly as part of
# `go get -u github.com/opentdf/client-go` (assuming CGO_CFLAGS and CGO_LDFLAGS point
# at the correct C++ headers/static lib in that environment, for that environment)
# but doing it explicitly here as well for the sake of example
RUN go build -o /dist/client-go
